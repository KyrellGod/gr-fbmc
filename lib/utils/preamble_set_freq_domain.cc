/* -*- c++ -*- */
/* 
 * Copyright 2014 <+YOU OR YOUR COMPANY+>.
 * 
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

#include "preamble_set_freq_domain.h"

#include "debug.h"

//_________________________________________________ (normalized to avg power 1)
static const float set0[256] = 
{ 
	1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0,
	1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0,
	1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0,
	1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0,
	1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0,
	1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0,
	1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0,
	1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0,
	1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0,
	1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0,
	1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0,
	1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0,
	1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0,
	1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0,
	1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0,
	1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0,
};

//_________________________________________________ (normalized to avg power 1)
static const float set1[256] = 
{ 
	 1.4142, 0,-1.4142, 0, 1.4142, 0, 1.4142, 0,-1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0,
	-1.4142, 0,-1.4142, 0, 1.4142, 0,-1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0,
	 1.4142, 0, 1.4142, 0,-1.4142, 0,-1.4142, 0, 1.4142, 0, 1.4142, 0,-1.4142, 0,-1.4142, 0,
	-1.4142, 0,-1.4142, 0, 1.4142, 0, 1.4142, 0,-1.4142, 0, 1.4142, 0, 1.4142, 0,-1.4142, 0,
	 1.4142, 0,-1.4142, 0,-1.4142, 0, 1.4142, 0,-1.4142, 0, 1.4142, 0,-1.4142, 0, 1.4142, 0,
	-1.4142, 0, 1.4142, 0, 1.4142, 0,-1.4142, 0,-1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0,
	 1.4142, 0,-1.4142, 0, 1.4142, 0,-1.4142, 0,-1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0,
	-1.4142, 0, 1.4142, 0,-1.4142, 0, 1.4142, 0,-1.4142, 0, 1.4142, 0,-1.4142, 0, 1.4142, 0,
	 1.4142, 0, 1.4142, 0,-1.4142, 0,-1.4142, 0,-1.4142, 0,-1.4142, 0,-1.4142, 0,-1.4142, 0,
	-1.4142, 0, 1.4142, 0,-1.4142, 0,-1.4142, 0, 1.4142, 0,-1.4142, 0, 1.4142, 0,-1.4142, 0,
	-1.4142, 0,-1.4142, 0, 1.4142, 0, 1.4142, 0,-1.4142, 0, 1.4142, 0,-1.4142, 0, 1.4142, 0,
	 1.4142, 0, 1.4142, 0, 1.4142, 0,-1.4142, 0, 1.4142, 0,-1.4142, 0,-1.4142, 0, 1.4142, 0,
	 1.4142, 0,-1.4142, 0,-1.4142, 0,-1.4142, 0, 1.4142, 0, 1.4142, 0,-1.4142, 0, 1.4142, 0,
	 1.4142, 0, 1.4142, 0, 1.4142, 0,-1.4142, 0,-1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0,
	 1.4142, 0, 1.4142, 0, 1.4142, 0,-1.4142, 0, 1.4142, 0, 1.4142, 0,-1.4142, 0,-1.4142, 0,
	 1.4142, 0,-1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0,-1.4142, 0, 1.4142, 0
};

//_________________________________________________ (normalized to avg power 1, optimzed for small cross correlation with set 1 -> but only for 64 subcarriers)
static const float set2[256] = 
{ 
	 1.4142, 0,-1.4142, 0,-1.4142, 0,-1.4142, 0,-1.4142, 0, 1.4142, 0,-1.4142, 0, 1.4142, 0,
	-1.4142, 0,-1.4142, 0,-1.4142, 0,-1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0,
	-1.4142, 0,-1.4142, 0, 1.4142, 0, 1.4142, 0,-1.4142, 0,-1.4142, 0,-1.4142, 0, 1.4142, 0,
	 1.4142, 0,-1.4142, 0,-1.4142, 0, 1.4142, 0,-1.4142, 0,-1.4142, 0,-1.4142, 0,-1.4142, 0,
	
	// defined only up to this point, rest is copied from set1
	 1.4142, 0,-1.4142, 0,-1.4142, 0, 1.4142, 0,-1.4142, 0, 1.4142, 0,-1.4142, 0, 1.4142, 0,
	-1.4142, 0, 1.4142, 0, 1.4142, 0,-1.4142, 0,-1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0,
	 1.4142, 0,-1.4142, 0, 1.4142, 0,-1.4142, 0,-1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0,
	-1.4142, 0, 1.4142, 0,-1.4142, 0, 1.4142, 0,-1.4142, 0, 1.4142, 0,-1.4142, 0, 1.4142, 0,
	 1.4142, 0, 1.4142, 0,-1.4142, 0,-1.4142, 0,-1.4142, 0,-1.4142, 0,-1.4142, 0,-1.4142, 0,
	-1.4142, 0, 1.4142, 0,-1.4142, 0,-1.4142, 0, 1.4142, 0,-1.4142, 0, 1.4142, 0,-1.4142, 0,
	-1.4142, 0,-1.4142, 0, 1.4142, 0, 1.4142, 0,-1.4142, 0, 1.4142, 0,-1.4142, 0, 1.4142, 0,
	 1.4142, 0, 1.4142, 0, 1.4142, 0,-1.4142, 0, 1.4142, 0,-1.4142, 0,-1.4142, 0, 1.4142, 0,
	 1.4142, 0,-1.4142, 0,-1.4142, 0,-1.4142, 0, 1.4142, 0, 1.4142, 0,-1.4142, 0, 1.4142, 0,
	 1.4142, 0, 1.4142, 0, 1.4142, 0,-1.4142, 0,-1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0,
	 1.4142, 0, 1.4142, 0, 1.4142, 0,-1.4142, 0, 1.4142, 0, 1.4142, 0,-1.4142, 0,-1.4142, 0,
	 1.4142, 0,-1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0, 1.4142, 0,-1.4142, 0, 1.4142, 0
};

//_________________________________________________
void get_scaled_preamble_set_freq_domain(int set, int veclength, float scale, std::vector<std::complex<float>> &preamble)
{	
	switch(set) 
	{
		case 0:	
		
			for(int i=0; i<veclength; i++)
				preamble.push_back(scale*std::complex<float>(set0[i],0.0));
				
			break;
			
		case 1:
		
			for(int i=0; i<veclength; i++)
				preamble.push_back(scale*std::complex<float>(set1[i],0.0));
			
			break;
			
		case 2:
		
			for(int i=0; i<veclength; i++)
				preamble.push_back(scale*std::complex<float>(set2[i],0.0));
			
			break;			
			
		default:
			
			PRINT("get_scaled_preamble_set_freq_domain error: Undefined preamble in frequeny domain. Returning values of set 1.");
			for(int i=0; i<veclength; i++)
				preamble.push_back(scale*std::complex<float>(set1[i],0.0));
				
			break;
	}
}
